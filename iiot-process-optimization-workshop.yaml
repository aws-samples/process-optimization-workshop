AWSTemplateFormatVersion: "2010-09-09"
Description: Template to create environment for the AWS Process Optimization workshop

Parameters:
  GitHubCodeRepository:
    Default: https://github.com/aws-samples/process-optimization-workshop.git
    Type: String
  ReactorRegion:
    Type: String
    Default: "us-east-1"
    AllowedValues:
      - "us-east-1"
  CoreName:
    Type: String
    Default: "iiot-reactor-core"
  GroupName:
    Type: String
    Default: "iiot-reactor-group"

Mappings:
  Region2LinuxAMI:
    us-east-1:
      ami: "ami-013f17f36f8b1fefb"
    us-west-2:
      ami: "ami-02701bcdc5509e57b"
    eu-west-1:
      ami: "ami-06fd78dc2f0b69910"
    eu-central-1:
      ami: "ami-0e0102e3ff768559b"
    ap-northeast-1:
      ami: "ami-0ef85cf6e604e5650"
    ap-southeast-1:
      ami: "ami-05b891753d41ff88f"
    ap-southeast-2:
      ami: "ami-076a5bf4a712000ed"

Resources:

  #################################
  #  IAM resources
  #################################
  
  GreengrassV2TokenExchangeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: credentials.iot.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: GreengrassV2TokenExchangeRoleAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                  - s3:GetBucketLocation
                Resource: "*"
      RoleName: GreengrassV2TokenExchangeRole
      Description: GGV2 role
      
  ReactorSageMakerEdgeAgentDeviceFleetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: sagemaker.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSIoTThingsRegistration'
        - 'arn:aws:iam::aws:policy/service-role/AWSIoTLogging'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/service-role/AWSIoTRuleActions'
        - 'arn:aws:iam::aws:policy/AWSIoTFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
        - 'arn:aws:iam::aws:policy/service-role/AmazonSageMakerEdgeDeviceFleetPolicy'
        - 'arn:aws:iam::aws:policy/service-role/AWSIoTFleetHubFederationAccess'

      Policies:
        - PolicyName: SagemakerS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                Resource: "*"
        - PolicyName: SagemakerIoTAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iot:CreateRoleAlias
                  - iot:DescribeRoleAlias
                  - iot:UpdateRoleAlias
                  - iot:TagResource
                  - iot:ListTagsForResource
                Resource: !Join
                            - ''
                            - - 'arn:aws:iot:'
                              - !Ref 'AWS::Region'
                              - ":"
                              - !Ref 'AWS::AccountId'
                              - ':rolealias/SageMaker*'
              - Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:PassRole
                Resource: !Join
                            - ''
                            - - 'arn:aws:iam::'
                              - !Ref 'AWS::Region'
                              - ':role/*SageMaker*'
      RoleName: ReactorSageMakerEdgeAgentDeviceFleetRole
      Description: Give Sagemaker access to required entities

  GreengrassV2SiteWiseEdgePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: GreengrassV2SiteWiseEdgePolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 'iotsitewise:BatchPutAssetPropertyValue'
            Resource: '*'
      Roles:
        - GreengrassV2TokenExchangeRole

  #################################
  # VPC resources
  #################################
  IndustrialVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Ref "AWS::StackName"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'InternetGateway / ', !Ref 'AWS::StackName' ] ]

  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref IndustrialVPC


  #################################
  # Public subnet resources
  #################################
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.200.0/24
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: IndustrialVPC
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'PublicSubnet / ', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Public

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'PublicRouteTable / ', !Ref 'AWS::StackName' ] ]
        - Key: Network
          Value: Public
      VpcId: !Ref IndustrialVPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - InternetGateway
      - AttachInternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  #################################
  # Reactor EC2 resources
  #################################

  ReactorInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: ReactorAccessRole

  ReactorAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
      Policies:
        # Need to change
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObjectVersion
                  - s3:GetObject
                  - s3:ListBucket
                Resource: "*"
                # - !Join ["", [ !Ref WorkshopBucketArn, "/*" ] ]
                # - !Ref WorkshopBucketArn
        - PolicyName: EdgeGatewayPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObjectVersion
                  - s3:GetObject
                  - s3:ListBucket
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - iot:*
                  - iotsitewise:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - greengrass:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:PutObject
                  - s3:List*
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:CreateRole
                  - iam:PassRole
                  - iam:CreatePolicy
                  - iam:AttachRolePolicy
                  - iam:GetPolicy
                  - sts:GetCallerIdentity
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:GetAuthorizationToken
                Resource: "*"
      RoleName: ReactorAccessRole
      Description: EC2 IAM role for SSM and S3 access

  ReactorSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ReactorSecurityGroup
      GroupDescription: Security Group for Reactor EC2 instance
      SecurityGroupIngress:
        # - IpProtocol: tcp
        #   FromPort: 8443
        #   ToPort: 8443
        #   CidrIp: 0.0.0.0/0
        # - IpProtocol: tcp
        #   FromPort: 8883
        #   ToPort: 8883
        #   CidrIp: 0.0.0.0/0
        # - IpProtocol: tcp
        #   FromPort: 443
        #   ToPort: 443
        #   CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 4840
          ToPort: 4840
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId:
        Ref: IndustrialVPC

  ReactorEC2Instance:
    Type: AWS::EC2::Instance
    #    DependsOn:

    Properties:
      InstanceType: t2.medium
      ImageId:
        Fn::FindInMap:
          - Region2LinuxAMI
          - Ref: "AWS::Region"
          - ami
      # KeyName:
      #   Ref: KeyPairName
      SecurityGroupIds:
        - Ref: ReactorSecurityGroup
      SubnetId:
        Ref: PublicSubnet
      Tags:
        - Key: Name
          Value: Reactor Server
      IamInstanceProfile:
        Ref: ReactorInstanceProfile

      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash -ex
              exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
              export DEBIAN_FRONTEND=noninteractive

              echo "Installing OS updates"
              sudo apt-get update -yq
              sudo DEBIAN_FRONTEND=noninteractive apt-get upgrade -yq
              sudo apt install unzip -y

              echo "Installing Dependencies"
              sudo apt install python3-pip -y

              sudo pip3 install --upgrade pip
              sudo pip3 install boto3
              sudo pip3 install opcua
              sudo pip3 install numpy --ignore-installed
              sudo pip3 install scipy --ignore-installed
              sudo pip3 install pymodbus --ignore-installed

              sudo apt-get -y install jq

              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install

              echo "Installing Node"
              sudo curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
              sudo apt-get install -y nodejs
              sudo npm install opcua-commander -g

              echo "Installing Java"
              sudo apt install default-jdk -yq
              sudo ln -s /usr/bin/java /usr/bin/java11

              echo "**** Installing Reactor Code ****"
              sudo mkdir -p /Reactor
              cd /Reactor
              sudo wget -O ReactorOPCUAServer.py https://d1npniv6o40jpw.cloudfront.net/ReactorOPCUAServer.py
              sudo wget -O cstr.py https://d1npniv6o40jpw.cloudfront.net/cstr.py
              sudo chown -R ubuntu:users /Reactor

              cat <<EOT > reactorOPCUAserver.service
              [Unit]
              Description=reactor OPCUA Server Service
              After=multi-user.target
              Conflicts=getty@tty1.service

              [Service]
              Type=simple
              ExecStart=/usr/bin/python3 /Reactor/ReactorOPCUAServer.py --csvOff
              RestartSec=2
              Restart=always
              StandardInput=tty-force
              WorkingDirectory=/Reactor

              [Install]
              WantedBy=multi-user.target
              EOT

              sudo cp ./reactorOPCUAserver.service /lib/systemd/system/
              sudo systemctl daemon-reload
              sudo systemctl enable reactorOPCUAserver.service
              sudo systemctl start reactorOPCUAserver.service

              echo "Installing Greengrass v2"
              cd ~/
              sudo adduser --system ggc_user
              sudo groupadd --system ggc_group

              wget -O- https://apt.corretto.aws/corretto.key | sudo apt-key add -
              sudo apt-get install software-properties-common -y
              sudo add-apt-repository 'deb https://apt.corretto.aws stable main'
              sudo apt-get update; sudo apt-get install -y java-11-amazon-corretto-jdk

              echo "Installing Greengrass Nucleus"
              curl -s https://d2s8p88vqu9w66.cloudfront.net/releases/greengrass-nucleus-latest.zip > greengrass-nucleus-latest.zip
              unzip greengrass-nucleus-latest.zip -d GreengrassInstaller && rm greengrass-nucleus-latest.zip
              sudo -E java -Droot=/greengrass/v2 -Dlog.store=FILE -jar ./GreengrassInstaller/lib/Greengrass.jar --aws-region ${ReactorRegion} --thing-name ${CoreName} --thing-group-name ${GroupName} --component-default-user ggc_user:ggc_group --provision true --setup-system-service true --deploy-dev-tools true

              echo "Installing Sitewise Gateway"
              sudo mkdir /var/sitewise
              chmod 777 /var/sitewise

              gtwy=`aws iotsitewise create-gateway --gateway-name iiot-sitewise-gw-01 --gateway-platform greengrassV2={coreDeviceThingName=${CoreName}}`
              sleep 5
              gtwyid=`echo $gtwy | jq -r ".gatewayId"`

              echo "installing Capabilities"
              cat <<EOC >opc-ua-capability-configuration.json
              {
                  "sources": [
                      {
                          "name": "OPCUAServer",
                          "endpoint": {
                              "certificateTrust": {
                                  "type": "TrustAny"
                              },
                              "endpointUri": "opc.tcp://0.0.0.0:4840",
                              "securityPolicy": "NONE",
                              "messageSecurityMode": "NONE",
                              "identityProvider": {
                                  "type": "Anonymous"
                              },
                              "nodeFilterRules": [
                                  {
                                      "action": "INCLUDE",
                                      "definition": {
                                          "type": "OpcUaRootPath",
                                          "rootPath": "/"
                                      }
                                  }
                              ]
                          },
                          "measurementDataStreamPrefix": "OPCUAServer"
                      }
                  ]
              }
              EOC

              aws iotsitewise update-gateway-capability-configuration \
                  --gateway-id $gtwyid \
                  --capability-namespace "iotsitewise:opcuacollector:2" \
                  --capability-configuration file://opc-ua-capability-configuration.json

              sleep 5

              cat <<EORM > create-reactor-model.json
              {
                  "assetModelName": "Reactor Model",
                  "assetModelDescription": "Represents Reactor",
                  "assetModelProperties": [
                      {
                          "name": "Serial Number",
                          "dataType": "STRING",
                          "type": {
                              "attribute": {
                                  "defaultValue": "reactor-1"
                               }
                          }
                      },
                      {
                          "name": "FlowRate",
                          "dataType": "DOUBLE",
                          "unit": "l/h",
                          "type": {
                              "measurement": {}
                          }
                      },
                      {
                          "name": "HeatFlux",
                          "dataType": "DOUBLE",
                          "unit": "kW",
                          "type": {
                              "measurement": {}
                          }
                      },
                      {
                          "name": "ConcentrationA",
                          "dataType": "DOUBLE",
                          "unit": "mol/l",
                          "type": {
                              "measurement": {}
                          }
                      },
                      {
                          "name": "ConcentrationB",
                          "dataType": "DOUBLE",
                          "unit": "mol/l",
                          "type": {
                              "measurement": {}
                          }
                      },
                      {
                          "name": "ReactorTemperature",
                          "dataType": "DOUBLE",
                          "unit": "C",
                          "type": {
                              "measurement": {}
                          }
                      },
                      {
                          "name": "CoolingJacketTemperature",
                          "dataType": "DOUBLE",
                          "unit": "C",
                          "type": {
                              "measurement": {}
                          }
                      }
                  ]
              }
              EORM

              model=`aws iotsitewise create-asset-model \
                  --cli-input-json file://create-reactor-model.json`

              sleep 30

              modelid=`echo $model | jq -r ".assetModelId"`

              asset=`aws iotsitewise create-asset \
                  --asset-model-id $modelid \
                  --asset-name "Reactor 1"`

            - ReactorRegion:
                Ref: ReactorRegion
              CoreName:
                Ref: CoreName
              GroupName:
                Ref: GroupName

  #################################
  # SageMaker notebook resources
  #################################
  S3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: Private
    DeletionPolicy: Retain

  NotebookInstance:
    Type: AWS::SageMaker::NotebookInstance
    Properties:
      InstanceType: "ml.t2.medium"
      RoleArn: !GetAtt SageMakerExecutionRole.Arn
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref NotebookSecurityGroup
      DefaultCodeRepository: !Ref GitHubCodeRepository
      VolumeSizeInGB: 20
      LifecycleConfigName: !GetAtt BasicNotebookInstanceLifecycleConfig.NotebookInstanceLifecycleConfigName

  BasicNotebookInstanceLifecycleConfig:
    Type: "AWS::SageMaker::NotebookInstanceLifecycleConfig"
    Properties:
      OnStart:
        - Content:
            Fn::Base64: |
              #!/bin/bash
              set -e
              sudo -u ec2-user -i << 'EOF'
              PACKAGE=dlr
              ENVIRONMENT=pytorch_p36
              source /home/ec2-user/anaconda3/bin/activate "$ENVIRONMENT"
              pip install --upgrade "$PACKAGE"
              source /home/ec2-user/anaconda3/bin/deactivate
              EOF

  NotebookSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Notebook Instance Security Group
      VpcId: !Ref IndustrialVPC
      SecurityGroupIngress:
        - FromPort: '443'
          IpProtocol: tcp
          ToPort: '443'
          CidrIp: 0.0.0.0/0

  SageMakerExecutionRole: 
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "sagemaker.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - arn:aws:iam::aws:policy/AWSIoTFullAccess
        - arn:aws:iam::aws:policy/AWSGreengrassFullAccess
      Policies:
        - 
          PolicyName: "s3_access"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: 
                  - "*"
                Resource: "arn:aws:s3:::*"

  EdgeDeviceFleet:
     Type: AWS::SageMaker::DeviceFleet
     Properties: 
       Description: String
       DeviceFleetName: iiot-reactor-tank
       OutputConfig:        
         S3OutputLocation: !Join [ '/', [ 's3:/', !Ref 'S3Bucket', 'capture'] ]
       RoleArn: !GetAtt ReactorSageMakerEdgeAgentDeviceFleetRole.Arn

Outputs:
  NotebookInstance:
    Description: SageMaker notebook instance for the machine learning part.
    Value: !GetAtt NotebookInstance.NotebookInstanceName
  S3Bucket:
    Description: S3 bucket for compiled machine learning models.
    Value: !Ref S3Bucket
  ReactorEC2Instance:
    Description: EC2 instance that runs Greengrass.
    Value: !Ref ReactorEC2Instance
  ReactorAvailabilityZone:
    Description: Availability zone where GG runs
    Value: !GetAtt ReactorEC2Instance.AvailabilityZone
  ReactorPrivateIp:
    Description: Private IP of the EC2 instance that runs the reactor.
    Value: !GetAtt ReactorEC2Instance.PrivateIp
  ReactorSageMakerDeviceFleet:
    Description: SageMaker device fleet
    Value: !Ref EdgeDeviceFleet
